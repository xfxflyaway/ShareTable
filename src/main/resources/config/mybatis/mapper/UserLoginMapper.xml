<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.simpleway.frst.mapper.UserLoginMapper">
	<resultMap id="BaseResultMap" type="com.simpleway.frst.domain.dto.UserLogin">
		<constructor>
			<idArg column="login_id" jdbcType="BIGINT" javaType="java.lang.Long" />
			<arg column="login_code" jdbcType="VARCHAR" javaType="java.lang.String" />
			<arg column="login_pwd" jdbcType="VARCHAR" javaType="java.lang.String" />
			<arg column="institution_type" jdbcType="INTEGER" javaType="java.lang.Integer" />
			<arg column="institution_id" jdbcType="BIGINT" javaType="java.lang.Long" />
			<arg column="state" jdbcType="INTEGER" javaType="java.lang.Integer" />
			<arg column="create_time" jdbcType="TIMESTAMP" javaType="java.util.Date" />
			<arg column="salt" jdbcType="VARCHAR" javaType="java.lang.String" />
			<arg column="type" jdbcType="INTEGER" javaType="java.lang.Integer" />
		</constructor>
	</resultMap>
	<sql id="Example_Where_Clause">
		<where>
			<foreach collection="oredCriteria" item="criteria" separator="or">
				<if test="criteria.valid">
					<trim prefix="(" suffix=")" prefixOverrides="and">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">
									and ${criterion.condition}
								</when>
								<when test="criterion.singleValue">
									and ${criterion.condition} #{criterion.value}
								</when>
								<when test="criterion.betweenValue">
									and ${criterion.condition} #{criterion.value} and
									#{criterion.secondValue}
								</when>
								<when test="criterion.listValue">
									and ${criterion.condition}
									<foreach collection="criterion.value" item="listItem"
										open="(" close=")" separator=",">
										#{listItem}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	<sql id="Base_Column_List">
		login_id, login_code, login_pwd, institution_type, institution_id, state,
		create_time,
		salt, type
	</sql>
	<select id="selectByExample" resultMap="BaseResultMap"
		parameterType="com.simpleway.frst.domain.dto.UserLoginExample">
		select
		<if test="distinct">
			distinct
		</if>
		'false' as QUERYID,
		<include refid="Base_Column_List" />
		from t_user_login
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
		<if test="orderByClause != null">
			order by ${orderByClause}
		</if>
	</select>
	<select id="selectByPrimaryKey" resultMap="BaseResultMap"
		parameterType="java.lang.Long">
		select
		<include refid="Base_Column_List" />
		from t_user_login
		where login_id = #{loginId,jdbcType=BIGINT}
	</select>
	<delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
		delete from t_user_login
		where login_id = #{loginId,jdbcType=BIGINT}
	</delete>
	<insert id="insert" parameterType="com.simpleway.frst.domain.dto.UserLogin">
		insert into t_user_login (login_id, login_code, login_pwd,
		institution_type, institution_id, state,
		create_time, salt, type
		)
		values (#{loginId,jdbcType=BIGINT}, #{loginCode,jdbcType=VARCHAR},
		#{loginPwd,jdbcType=VARCHAR},
		#{institutionType,jdbcType=INTEGER}, #{institutionId,jdbcType=BIGINT}, #{state,jdbcType=INTEGER},
		#{createTime,jdbcType=TIMESTAMP}, #{salt,jdbcType=VARCHAR},
		#{type,jdbcType=INTEGER}
		)
	</insert>
	<insert id="insertSelective" parameterType="com.simpleway.frst.domain.dto.UserLogin">
		insert into t_user_login
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="loginId != null">
				login_id,
			</if>
			<if test="loginCode != null">
				login_code,
			</if>
			<if test="loginPwd != null">
				login_pwd,
			</if>
			<if test="institutionType != null">
				institution_type,
			</if>
			<if test="institutionId != null">
				institution_id,
			</if>
			<if test="state != null">
				state,
			</if>
			<if test="createTime != null">
				create_time,
			</if>
			<if test="salt != null">
				salt,
			</if>
			<if test="type != null">
				type,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="loginId != null">
				#{loginId,jdbcType=BIGINT},
			</if>
			<if test="loginCode != null">
				#{loginCode,jdbcType=VARCHAR},
			</if>
			<if test="loginPwd != null">
				#{loginPwd,jdbcType=VARCHAR},
			</if>
			<if test="institutionType != null">
				#{institutionType,jdbcType=INTEGER},
			</if>
			<if test="institutionId != null">
				#{institutionId,jdbcType=BIGINT},
			</if>
			<if test="state != null">
				#{state,jdbcType=INTEGER},
			</if>
			<if test="createTime != null">
				#{createTime,jdbcType=TIMESTAMP},
			</if>
			<if test="salt != null">
				#{salt,jdbcType=VARCHAR},
			</if>
			<if test="type != null">
				#{type,jdbcType=INTEGER},
			</if>
		</trim>
	</insert>
	<update id="updateByPrimaryKeySelective" parameterType="com.simpleway.frst.domain.dto.UserLogin">
		update t_user_login
		<set>
			<if test="loginCode != null">
				login_code = #{loginCode,jdbcType=VARCHAR},
			</if>
			<if test="loginPwd != null">
				login_pwd = #{loginPwd,jdbcType=VARCHAR},
			</if>
			<if test="institutionType != null">
				institution_type = #{institutionType,jdbcType=INTEGER},
			</if>
			<if test="institutionId != null">
				institution_id = #{institutionId,jdbcType=BIGINT},
			</if>
			<if test="state != null">
				state = #{state,jdbcType=INTEGER},
			</if>
			<if test="createTime != null">
				create_time = #{createTime,jdbcType=TIMESTAMP},
			</if>
			<if test="salt != null">
				salt = #{salt,jdbcType=VARCHAR},
			</if>
			<if test="type != null">
				type = #{type,jdbcType=INTEGER},
			</if>
		</set>
		where login_id = #{loginId,jdbcType=BIGINT}
	</update>
	<update id="updateByPrimaryKey" parameterType="com.simpleway.frst.domain.dto.UserLogin">
		update t_user_login
		set login_code = #{loginCode,jdbcType=VARCHAR},
		login_pwd = #{loginPwd,jdbcType=VARCHAR},
		institution_type = #{institutionType,jdbcType=INTEGER},
		institution_id = #{institutionId,jdbcType=BIGINT},
		state = #{state,jdbcType=INTEGER},
		create_time = #{createTime,jdbcType=TIMESTAMP},
		salt = #{salt,jdbcType=VARCHAR},
		type = #{type,jdbcType=INTEGER}
		where login_id = #{loginId,jdbcType=BIGINT}
	</update>

	<update id="updateUserLogInTimes">
		update sm_user set state=2 where
		login_code=#{loginCode} and state=1
	</update>

	<update id="unlockUser">
		update sm_user set state=1 where user_id=#{userId}
		and state=2
	</update>

	<update id="enableUser">
		update sm_user set state=1 where user_id=#{userId}
		and state=0
	</update>

	<update id="disableUser">
		update sm_user set state=0 where user_id=#{userId}
	</update>


</mapper>